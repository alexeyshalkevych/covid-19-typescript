{"version":3,"sources":["store/selectors/covidSelectors.ts","helpers/getCountriesNameAndValue.ts","components/ControlSelect/ControlSelect.tsx","constants/actionTypes.ts","components/Map/Map.tsx","helpers/sortedCountries.ts","components/TableCountries/TableCountries.tsx","services/covidService.ts","helpers/buildChartData.ts","components/LineGraph/LineGraph.tsx","components/CovidInformation/CovidInformation.tsx","components/InfoBox/InfoBox.tsx","components/CovidStatistics/CovidStatistics.tsx","components/App/App.tsx","store/actions/covidCountriesActions.ts","store/sagas/covidCountriesSaga.ts","store/actions/covidCountyActions.ts","store/sagas/covidCountrySaga.ts","store/sagas/covidHistorySaga.ts","store/actions/covidHistoryActions.ts","store/sagas/index.ts","store/reducers/covidCountriesReducer.ts","store/reducers/covidErrors.ts","store/reducers/covidCountryReducer.ts","store/reducers/covidHistoryReducer.ts","store/reducers/index.ts","store/index.ts","index.tsx"],"names":["getCountries","state","countries","getCountry","country","getCountriesNameAndValue","map","name","value","countryInfo","iso2","ControlSelect","useState","countryField","setCountryField","dispatch","useDispatch","useSelector","useEffect","type","FormControl","Select","variant","onChange","event","target","MenuItem","key","casesTypeColors","cases","hex","rgb","half_op","multiplier","recovered","deaths","Map","casesType","className","center","lat","long","zoom","TileLayer","url","attribution","Circle","color","fillColor","fillOpacity","radius","Math","sqrt","Popup","style","backgroundImage","flag","numeral","format","sortedCountries","sort","a","b","TableCountries","_id","axios","defaults","baseURL","fetchCountries","get","data","fetchCountry","countryCode","fetchCovidHistoryByLastThreeMonth","buildChartData","lastDataPoint","chartData","Object","keys","forEach","date","newDataPoint","x","y","push","options","legend","display","elements","point","maintainAspectRatio","tooltips","mode","intersect","callbacks","label","tooltipItem","scales","xAxes","time","parser","tooltipFormat","yAxes","gridLines","ticks","callback","LineGraph","setData","fetchData","length","datasets","backgroundColor","borderColor","CovidInformation","Card","CardContent","InfoBox","title","total","active","isRed","onClick","Typography","gutterBottom","CovidStatistics","onSetCases","todayCases","todayRecovered","todayDeaths","App","setCases","getCountriesSuccess","payload","getCountriesWorker","getCountriesWatcher","put","call","status","error","response","statusText","takeLatest","getCountrySuccess","getCountryWorker","getCountryWatcher","Eff","getCovidHistoryWorker","getCovidHistoryWatcher","covidHistory","rootSaga","all","initialState","covidCountriesReducer","covidErrorReducer","covidCountryReducer","covidHistoryReducer","rootReducer","combineReducers","history","sagaMiddleware","createSagaMiddleware","enhancer","applyMiddleware","store","createStore","composeWithDevTools","run","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.4789fa0a.chunk.js","sourcesContent":["import {\n  ICountriesError,\n  ICountry,\n  ICovidHistory,\n  IStateCountries,\n  IStateCountry,\n  IStateError,\n  IStateCovidHistory,\n} from '../../@types/types';\n\nexport const getCountries = (state: IStateCountries): ICountry[] =>\n  state.countries;\n\nexport const getCountry = (state: IStateCountry): ICountry => state.country;\n\nexport const getError = (state: IStateError): ICountriesError => state.error;\n\nexport const getCovidHistory = (state: IStateCovidHistory): ICovidHistory =>\n  state.history;\n","import { ICountry, IMyCountry } from '../@types/types';\n\nconst getCountriesNameAndValue = (countries: ICountry[]): IMyCountry[] => {\n  return countries.map((country: ICountry) => ({\n    name: country.country,\n    value: country.countryInfo.iso2,\n  }));\n};\n\nexport default getCountriesNameAndValue;\n","import React, { useState, useEffect } from 'react';\nimport { FormControl, Select, MenuItem } from '@material-ui/core';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { FETCH_COUNTRIES, FETCH_COUNTRY } from '../../constants/actionTypes';\nimport { getCountries } from '../../store/selectors/covidSelectors';\nimport getCountriesNameAndValue from '../../helpers/getCountriesNameAndValue';\n\nconst ControlSelect: React.FC = () => {\n  const [countryField, setCountryField] = useState<string>('worldwide');\n  const dispatch = useDispatch();\n  const countries = getCountriesNameAndValue(useSelector(getCountries));\n\n  useEffect(() => {\n    const value = 'worldwide';\n    dispatch({ type: FETCH_COUNTRY, value });\n  }, [dispatch]);\n\n  useEffect(() => {\n    dispatch({ type: FETCH_COUNTRIES });\n  }, [dispatch]);\n\n  const chnageSelectHandler = (\n    event: React.ChangeEvent<{ value: unknown }>,\n  ) => {\n    const value = event.target.value as string;\n\n    dispatch({ type: FETCH_COUNTRY, value });\n\n    setCountryField(value);\n  };\n\n  return (\n    <FormControl>\n      <Select\n        variant=\"outlined\"\n        value={countryField}\n        onChange={chnageSelectHandler}\n      >\n        <MenuItem value=\"worldwide\">Worldwide</MenuItem>\n        {countries.map(country => (\n          <MenuItem value={country.value} key={country.value + country.name}>\n            {country.name}\n          </MenuItem>\n        ))}\n      </Select>\n    </FormControl>\n  );\n};\n\nexport default ControlSelect;\n","export const FETCH_COUNTRIES = 'FETCH_COUNTRIES';\nexport const FETCH_COUNTRIES_REQUEST = 'FETCH_COUNTRIES_REQUEST';\nexport const FETCH_COUNTRIES_SUCCESS = 'FETCH_COUNTRIES_SUCCESS';\nexport const FETCH_COUNTRIES_ERROR = 'FETCH_COUNTRIES_ERROR';\n\nexport const FETCH_COUNTRY = 'FETCH_COUNTRY';\nexport const FETCH_COUNTRY_REQUEST = 'FETCH_COUNTRY_REQUEST';\nexport const FETCH_COUNTRY_SUCCESS = 'FETCH_COUNTRY_SUCCESS';\nexport const FETCH_COUNTRY_ERROR = 'FETCH_COUNTRY_ERROR';\n\nexport const FETCH_COVID_HISTORY = 'FETCH_COVID_HISTORY';\nexport const FETCH_COVID_HISTORY_REQUEST = 'FETCH_COVID_HISTORY_REQUEST';\nexport const FETCH_COVID_HISTORY_SUCCESS = 'FETCH_COVID_HISTORY_SUCCESS';\nexport const FETCH_COVID_HISTORY_ERROR = 'FETCH_COVID_HISTORY_ERROR';\n","import React from 'react';\nimport { Map as LeafletMap, TileLayer, Circle, Popup } from 'react-leaflet';\nimport { useSelector } from 'react-redux';\nimport numeral from 'numeral';\nimport { getCountries, getCountry } from '../../store/selectors/covidSelectors';\nimport {\n  ICountry,\n  Cases,\n  IStateCountries,\n  IStateCountry,\n} from '../../@types/types';\nimport './Map.css';\n\ninterface ICasesType {\n  hex: string;\n  rgb: string;\n  half_op: string;\n  multiplier: number;\n}\n\ninterface ICasesTypeColors {\n  cases: ICasesType;\n  recovered: ICasesType;\n  deaths: ICasesType;\n}\n\nconst casesTypeColors: ICasesTypeColors = {\n  cases: {\n    hex: '#CC1034',\n    rgb: 'rgb(204, 16, 52)',\n    half_op: 'rgba(204, 16, 52, 0.5)',\n    multiplier: 800,\n  },\n  recovered: {\n    hex: '#7dd71d',\n    rgb: 'rgb(125, 215, 29)',\n    half_op: 'rgba(125, 215, 29, 0.5)',\n    multiplier: 1200,\n  },\n  deaths: {\n    hex: '#fb4443',\n    rgb: 'rgb(251, 68, 67)',\n    half_op: 'rgba(251, 68, 67, 0.5)',\n    multiplier: 2000,\n  },\n};\n\ninterface IMapProps {\n  casesType: Cases;\n}\n\nconst Map: React.FC<IMapProps> = ({ casesType }) => {\n  const countries = useSelector<IStateCountries, ICountry[]>(getCountries);\n  const country = useSelector<IStateCountry, ICountry>(getCountry);\n\n  return (\n    <div className=\"map\">\n      <LeafletMap\n        center={[\n          country.countryInfo?.lat || 34.80746,\n          country.countryInfo?.long || -40.4796,\n        ]}\n        zoom={3}\n      >\n        <TileLayer\n          url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\n          attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\n        />\n        {countries.map((country: ICountry) => (\n          <Circle\n            center={[country.countryInfo.lat, country.countryInfo.long]}\n            color={casesTypeColors[casesType].hex}\n            fillColor={casesTypeColors[casesType].hex}\n            fillOpacity={0.4}\n            radius={Math.sqrt(country.cases) * casesTypeColors.cases.multiplier}\n            key={country.countryInfo.iso2 + country.country}\n          >\n            <Popup>\n              <div className=\"info-container\">\n                <div\n                  className=\"info-flag\"\n                  style={{\n                    backgroundImage: `url(${country.countryInfo.flag})`,\n                  }}\n                />\n                <div className=\"info-name\">{country.country}</div>\n                <div className=\"info-confirmed\">\n                  Cases: {numeral(country.cases).format('0,0')}\n                </div>\n                <div className=\"info-recovered\">\n                  Recovered: {numeral(country.recovered).format('0,0')}\n                </div>\n                <div className=\"info-deaths\">\n                  Deaths: {numeral(country.deaths).format('0,0')}\n                </div>\n              </div>\n            </Popup>\n          </Circle>\n        ))}\n      </LeafletMap>\n    </div>\n  );\n};\n\nexport default Map;\n","import { ICountry } from '../@types/types';\n\nconst sortedCountries = (countries: ICountry[]): ICountry[] =>\n  [...countries].sort((a, b) => b.cases - a.cases);\n\nexport default sortedCountries;\n","import React from 'react';\nimport { useSelector } from 'react-redux';\nimport numeral from 'numeral';\nimport { getCountries } from '../../store/selectors/covidSelectors';\nimport sortedCountries from '../../helpers/sortedCountries';\nimport { IStateCountries, ICountry } from '../../@types/types';\nimport './TableCountries.css';\n\nconst TableCountries: React.FC = () => {\n  const countries = sortedCountries(\n    useSelector<IStateCountries, ICountry[]>(getCountries),\n  );\n\n  return (\n    <ul className=\"table\">\n      {countries.map(country => (\n        <li key={`${country.countryInfo._id}${country.deaths}`}>\n          <p>{country.country}</p>\n          <p>\n            <strong>{numeral(country.cases).format('0,0')}</strong>\n          </p>\n        </li>\n      ))}\n    </ul>\n  );\n};\n\nexport default TableCountries;\n","import axios from 'axios';\nimport { ICountry, IMyCountry, ICovidHistory } from '../@types/types';\n\naxios.defaults.baseURL = 'https://disease.sh/';\n\nexport const fetchCountries = async (): Promise<IMyCountry[]> => {\n  const { data } = await axios.get('v3/covid-19/countries');\n\n  return data;\n};\n\nexport const fetchCountry = async (countryCode: string): Promise<ICountry> => {\n  switch (countryCode) {\n    case 'worldwide': {\n      const { data } = await axios.get('/v3/covid-19/all');\n      return data;\n    }\n\n    case countryCode: {\n      const { data } = await axios.get(`/v3/covid-19/countries/${countryCode}`);\n      return data;\n    }\n    default:\n      return {} as ICountry;\n  }\n};\n\nexport const fetchCovidHistoryByLastThreeMonth = async (): Promise<\n  ICovidHistory\n> => {\n  const { data } = await axios.get('/v3/covid-19/historical/all?lastdays=120');\n\n  return data;\n};\n","import { ICovidHistory, Cases, IGraph } from '../@types/types';\n\nconst buildChartData = (data: ICovidHistory, casesType: Cases): IGraph[] => {\n  const chartData: IGraph[] = [];\n  let lastDataPoint: number;\n\n  Object.keys(data.cases || {}).forEach(date => {\n    if (lastDataPoint) {\n      const newDataPoint: IGraph = {\n        x: date,\n        y: data[casesType][date] - lastDataPoint,\n      };\n      chartData.push(newDataPoint);\n    }\n    lastDataPoint = data[casesType][date];\n  });\n\n  return chartData;\n};\n\nexport default buildChartData;\n","import React, { useEffect, useState } from 'react';\nimport { Line } from 'react-chartjs-2';\nimport numeral from 'numeral';\nimport { fetchCovidHistoryByLastThreeMonth } from '../../services/covidService';\nimport { Cases, IGraph } from '../../@types/types';\nimport buildChartData from '../../helpers/buildChartData';\n\ninterface ITooltipItem {\n  value: number;\n}\n\nconst options = {\n  legend: {\n    display: false,\n  },\n  elements: {\n    point: {\n      radius: 0,\n    },\n  },\n  maintainAspectRatio: false,\n  tooltips: {\n    mode: 'index',\n    intersect: false,\n    callbacks: {\n      label(tooltipItem: ITooltipItem) {\n        return numeral(tooltipItem.value).format('+0,0');\n      },\n    },\n  },\n  scales: {\n    xAxes: [\n      {\n        type: 'time',\n        time: {\n          parser: 'MM/DD/YY',\n          tooltipFormat: 'll',\n        },\n      },\n    ],\n    yAxes: [\n      {\n        gridLines: {\n          display: false,\n        },\n        ticks: {\n          callback(value: number) {\n            return numeral(value).format('0a');\n          },\n        },\n      },\n    ],\n  },\n};\n\ninterface ILineGraphProps {\n  casesType: Cases;\n}\n\nconst LineGraph: React.FC<ILineGraphProps> = ({ casesType }) => {\n  const [data, setData] = useState<IGraph[]>([]);\n\n  useEffect(() => {\n    const fetchData = async () => {\n      const data = await fetchCovidHistoryByLastThreeMonth();\n      const chartData = buildChartData(data, casesType);\n\n      setData(chartData);\n    };\n\n    fetchData();\n  }, [casesType]);\n\n  return (\n    <div>\n      {data.length > 0 && (\n        <Line\n          data={{\n            datasets: [\n              {\n                backgroundColor:\n                  casesType === 'recovered'\n                    ? 'rgba(65, 204, 1, 0.5)'\n                    : 'rgba(204, 16, 52, 0.5)',\n                borderColor: casesType === 'recovered' ? '#00350d' : '#CC1034',\n                data,\n              },\n            ],\n          }}\n          options={options}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default LineGraph;\n","import React from 'react';\nimport { Card, CardContent } from '@material-ui/core';\nimport TableCountries from '../TableCountries/TableCountries';\nimport LineGraph from '../LineGraph/LineGraph';\nimport { Cases } from '../../@types/types';\n\ninterface ICovidInformationProps {\n  cases: Cases;\n}\n\nconst CovidInformation: React.FC<ICovidInformationProps> = ({ cases }) => {\n  return (\n    <Card>\n      <CardContent>\n        <div className=\"App__information\">\n          <h3>Live Cases by Country</h3>\n          <TableCountries />\n          <h3>Worldwide new {cases}</h3>\n          <LineGraph casesType={cases} />\n        </div>\n      </CardContent>\n    </Card>\n  );\n};\n\nexport default CovidInformation;\n","import React from 'react';\nimport { Card, CardContent, Typography } from '@material-ui/core';\nimport numeral from 'numeral';\nimport './InfoBox.css';\n\ninterface IINfoBoxProps {\n  title: string;\n  cases: number;\n  total: number;\n  active: boolean;\n  isRed?: boolean;\n  onClick: () => void;\n}\n\nconst InfoBox: React.FC<IINfoBoxProps> = ({\n  title,\n  cases,\n  total,\n  active,\n  isRed,\n  onClick,\n}) => {\n  return (\n    <Card\n      className={`infoBox ${active && 'infoBox--selected'} ${\n        isRed && 'infoBox--red'\n      }`}\n      onClick={onClick}\n    >\n      <CardContent>\n        <Typography color=\"textSecondary\" gutterBottom>\n          {title}\n        </Typography>\n        <h2 className={`infoBox__cases ${!isRed && 'infoBox__cases--green'}`}>\n          {cases}\n        </h2>\n        <Typography className=\"infoBox__total\" color=\"textSecondary\">\n          {numeral(total).format('0.0a')} Total\n        </Typography>\n      </CardContent>\n    </Card>\n  );\n};\n\nexport default InfoBox;\n","import React from 'react';\nimport { useSelector } from 'react-redux';\nimport { getCountry } from '../../store/selectors/covidSelectors';\nimport InfoBox from '../InfoBox/InfoBox';\nimport { Cases, IStateCountry, ICountry } from '../../@types/types';\n\ninterface ICovidStatisticsProps {\n  cases: Cases;\n  onSetCases: (cases: Cases) => void;\n}\n\nconst CovidStatistics: React.FC<ICovidStatisticsProps> = ({\n  cases,\n  onSetCases,\n}) => {\n  const country = useSelector<IStateCountry, ICountry>(getCountry);\n\n  return (\n    <div className=\"App__stats\">\n      <InfoBox\n        onClick={() => onSetCases('cases')}\n        title=\"Coronavirus Cases\"\n        cases={country.todayCases}\n        total={country.cases}\n        isRed\n        active={cases === 'cases'}\n      />\n      <InfoBox\n        onClick={() => onSetCases('recovered')}\n        title=\"Recovered\"\n        cases={country.todayRecovered}\n        total={country.recovered}\n        active={cases === 'recovered'}\n      />\n      <InfoBox\n        onClick={() => onSetCases('deaths')}\n        title=\"Deaths\"\n        cases={country.todayDeaths}\n        total={country.deaths}\n        isRed\n        active={cases === 'deaths'}\n      />\n    </div>\n  );\n};\n\nexport default CovidStatistics;\n","import React, { useState } from 'react';\nimport ControlSelect from '../ControlSelect/ControlSelect';\nimport { Cases } from '../../@types/types';\nimport Map from '../Map/Map';\nimport CovidInformation from '../CovidInformation/CovidInformation';\nimport CovidStatistics from '../CovidStatistics/CovidStatistics';\nimport 'leaflet/dist/leaflet.css';\nimport './App.css';\n\nconst App: React.FC = () => {\n  const [cases, setCases] = useState<Cases>('cases');\n\n  const setCasesState = (cases: Cases): void => {\n    setCases(cases);\n  };\n\n  return (\n    <div className=\"App\">\n      <div className=\"App__left\">\n        <div className=\"App__header\">\n          <h1>COVID-19 TRACKER</h1>\n          <ControlSelect />\n        </div>\n        <CovidStatistics cases={cases} onSetCases={setCasesState} />\n        <Map casesType={cases} />\n      </div>\n      <CovidInformation cases={cases} />\n    </div>\n  );\n};\n\nexport default App;\n","import {\n  FETCH_COUNTRIES_REQUEST,\n  FETCH_COUNTRIES_SUCCESS,\n  FETCH_COUNTRIES_ERROR,\n} from '../../constants/actionTypes';\nimport {\n  ICountry,\n  IActionGetCountries,\n  ICountriesError,\n  IActionCountriesError,\n} from '../../@types/types';\n\nexport const getCountriesRequest = (): IActionGetCountries => ({\n  type: FETCH_COUNTRIES_REQUEST,\n});\n\nexport const getCountriesSuccess = (\n  countries: ICountry[],\n): IActionGetCountries => ({\n  type: FETCH_COUNTRIES_SUCCESS,\n  payload: countries,\n});\n\nexport const getCountriesError = (\n  error: ICountriesError,\n): IActionCountriesError => ({\n  type: FETCH_COUNTRIES_ERROR,\n  payload: {\n    status: error.status,\n    statusText: error.statusText,\n  },\n});\n","import { call, put, takeLatest } from 'redux-saga/effects';\nimport { SagaIterator } from 'redux-saga';\nimport {\n  getCountriesRequest,\n  getCountriesSuccess,\n  getCountriesError,\n} from '../actions/covidCountriesActions';\nimport { fetchCountries } from '../../services/covidService';\nimport { FETCH_COUNTRIES } from '../../constants/actionTypes';\n\nfunction* getCountriesWorker() {\n  yield put(getCountriesRequest());\n\n  try {\n    const countries = yield call(fetchCountries);\n\n    yield put(getCountriesSuccess(countries));\n  } catch (error) {\n    yield put(getCountriesError(error.response));\n  }\n}\n\nfunction* getCountriesWatcher(): SagaIterator<void> {\n  yield takeLatest(FETCH_COUNTRIES, getCountriesWorker);\n}\n\nexport default getCountriesWatcher;\n","import {\n  FETCH_COUNTRY_REQUEST,\n  FETCH_COUNTRY_SUCCESS,\n  FETCH_COUNTRY_ERROR,\n} from '../../constants/actionTypes';\nimport {\n  ICountry,\n  IActionGetCountries,\n  IActionGetCountry,\n  ICountriesError,\n  IActionCountriesError,\n} from '../../@types/types';\n\nexport const getCountryRequest = (): IActionGetCountries => ({\n  type: FETCH_COUNTRY_REQUEST,\n});\n\nexport const getCountrySuccess = (country: ICountry): IActionGetCountry => ({\n  type: FETCH_COUNTRY_SUCCESS,\n  payload: country,\n});\n\nexport const getCountryError = (\n  error: ICountriesError,\n): IActionCountriesError => ({\n  type: FETCH_COUNTRY_ERROR,\n  payload: {\n    status: error.status,\n    statusText: error.statusText,\n  },\n});\n","import { call, put } from 'redux-saga/effects';\nimport * as Eff from 'redux-saga/effects';\nimport { SagaIterator } from 'redux-saga';\nimport {\n  getCountryRequest,\n  getCountrySuccess,\n  getCountryError,\n} from '../actions/covidCountyActions';\nimport { fetchCountry } from '../../services/covidService';\nimport { FETCH_COUNTRY } from '../../constants/actionTypes';\n\nconst { takeLatest }: any = Eff;\n\ninterface ICountryCode {\n  value: string;\n}\n\nfunction* getCountryWorker({ value }: ICountryCode) {\n  yield put(getCountryRequest());\n\n  try {\n    const country = yield call(fetchCountry, value);\n\n    yield put(getCountrySuccess(country));\n  } catch (error) {\n    yield put(getCountryError(error.response));\n  }\n}\n\nfunction* getCountryWatcher(): SagaIterator<void> {\n  yield takeLatest(FETCH_COUNTRY, getCountryWorker);\n}\n\nexport default getCountryWatcher;\n","import { put, call, takeLatest } from 'redux-saga/effects';\nimport { SagaIterator } from 'redux-saga';\nimport {\n  getCovidHistoryRequest,\n  getCovidHistorySuccess,\n  getCovidHistoryError,\n} from '../actions/covidHistoryActions';\nimport { fetchCovidHistoryByLastThreeMonth } from '../../services/covidService';\nimport { FETCH_COVID_HISTORY } from '../../constants/actionTypes';\n\nfunction* getCovidHistoryWorker() {\n  yield put(getCovidHistoryRequest());\n\n  try {\n    const covidHistory = yield call(fetchCovidHistoryByLastThreeMonth);\n\n    yield put(getCovidHistorySuccess(covidHistory));\n  } catch (error) {\n    yield put(getCovidHistoryError(error.response));\n  }\n}\n\nfunction* getCovidHistoryWatcher(): SagaIterator<void> {\n  yield takeLatest(FETCH_COVID_HISTORY, getCovidHistoryWorker);\n}\n\nexport default getCovidHistoryWatcher;\n","import {\n  FETCH_COVID_HISTORY_REQUEST,\n  FETCH_COVID_HISTORY_SUCCESS,\n  FETCH_COVID_HISTORY_ERROR,\n} from '../../constants/actionTypes';\nimport {\n  ICovidHistory,\n  IActionGetCovidHistory,\n  ICountriesError,\n  IActionCountriesError,\n} from '../../@types/types';\n\nexport const getCovidHistoryRequest = (): IActionGetCovidHistory => ({\n  type: FETCH_COVID_HISTORY_REQUEST,\n});\n\nexport const getCovidHistorySuccess = (\n  histories: ICovidHistory,\n): IActionGetCovidHistory => ({\n  type: FETCH_COVID_HISTORY_SUCCESS,\n  payload: histories,\n});\n\nexport const getCovidHistoryError = (\n  error: ICountriesError,\n): IActionCountriesError => ({\n  type: FETCH_COVID_HISTORY_ERROR,\n  payload: error,\n});\n","import { all } from 'redux-saga/effects';\nimport getCountriesWatcher from './covidCountriesSaga';\nimport getCountryWatcher from './covidCountrySaga';\nimport getCovidHistoryWatcher from './covidHistorySaga';\n\nfunction* rootSaga(): Generator {\n  yield all([\n    getCountriesWatcher(),\n    getCountryWatcher(),\n    getCovidHistoryWatcher(),\n  ]);\n}\n\nexport default rootSaga;\n","import { FETCH_COUNTRIES_SUCCESS } from '../../constants/actionTypes';\nimport { IActionGetCountries, CountriesState } from '../../@types/types';\n\nconst initialState: CountriesState = [];\n\nconst covidCountriesReducer = (\n  state = initialState,\n  { type, payload }: IActionGetCountries,\n): CountriesState => {\n  switch (type) {\n    case FETCH_COUNTRIES_SUCCESS:\n      return payload;\n\n    default:\n      return state;\n  }\n};\n\nexport default covidCountriesReducer;\n","import {\n  FETCH_COUNTRIES_ERROR,\n  FETCH_COUNTRIES_REQUEST,\n  FETCH_COUNTRIES_SUCCESS,\n  FETCH_COUNTRY_REQUEST,\n  FETCH_COUNTRY_SUCCESS,\n  FETCH_COUNTRY_ERROR,\n} from '../../constants/actionTypes';\nimport { ErrorState, IActionCountriesError } from '../../@types/types';\n\nconst initialState: ErrorState = null;\n\nconst covidErrorReducer = (\n  state = initialState,\n  { type, payload }: IActionCountriesError,\n): ErrorState => {\n  switch (type) {\n    case FETCH_COUNTRIES_REQUEST:\n    case FETCH_COUNTRIES_SUCCESS:\n    case FETCH_COUNTRY_REQUEST:\n    case FETCH_COUNTRY_SUCCESS:\n      return state;\n    case FETCH_COUNTRIES_ERROR:\n    case FETCH_COUNTRY_ERROR:\n      return payload;\n\n    default:\n      return state;\n  }\n};\n\nexport default covidErrorReducer;\n","import { FETCH_COUNTRY_SUCCESS } from '../../constants/actionTypes';\nimport {\n  IActionGetCountry,\n  CountryState,\n  ICountry,\n  IAllCountry,\n} from '../../@types/types';\n\nconst initialState: CountryState = {} as ICountry | IAllCountry;\n\nconst covidCountryReducer = (\n  state = initialState,\n  { type, payload }: IActionGetCountry,\n): CountryState => {\n  switch (type) {\n    case FETCH_COUNTRY_SUCCESS:\n      return payload;\n\n    default:\n      return state;\n  }\n};\n\nexport default covidCountryReducer;\n","import {\n  CovidHistoryState,\n  ICovidHistory,\n  IActionGetCovidHistory,\n} from '../../@types/types';\nimport { FETCH_COVID_HISTORY_SUCCESS } from '../../constants/actionTypes';\n\nconst initialState: CovidHistoryState = {} as ICovidHistory;\n\nconst covidHistoryReducer = (\n  state = initialState,\n  { type, payload }: IActionGetCovidHistory,\n): CovidHistoryState => {\n  switch (type) {\n    case FETCH_COVID_HISTORY_SUCCESS:\n      return payload;\n\n    default:\n      return state;\n  }\n};\n\nexport default covidHistoryReducer;\n","import { combineReducers } from 'redux';\nimport covidCountriesReducer from './covidCountriesReducer';\nimport covidErrorReducer from './covidErrors';\nimport covidCountryReducer from './covidCountryReducer';\nimport covidHistoryReducer from './covidHistoryReducer';\n\nconst rootReducer = combineReducers({\n  countries: covidCountriesReducer,\n  country: covidCountryReducer,\n  error: covidErrorReducer,\n  history: covidHistoryReducer,\n});\n\nexport default rootReducer;\n","import { createStore, applyMiddleware } from 'redux';\nimport createSagaMiddleware from 'redux-saga';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport rootSaga from './sagas/index';\nimport rootReducer from './reducers/index';\n\nconst sagaMiddleware = createSagaMiddleware();\n\nconst enhancer = applyMiddleware(sagaMiddleware);\n\nconst store = createStore(rootReducer, composeWithDevTools(enhancer));\n\nsagaMiddleware.run(rootSaga);\n\nexport default store;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport App from './components/App/App';\nimport store from './store/index';\nimport './index.css';\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}